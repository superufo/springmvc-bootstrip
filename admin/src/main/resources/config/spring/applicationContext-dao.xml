<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

     <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.earlybird.dao.*,com.earlybird"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

    <!-- 引入数据库配置文件 -->
    <context:property-placeholder location="classpath:config/db.properties"/>

    <!-- 配置C3P0 数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    </bean>

    <!-- 配置 SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:config/SqlMapConfig.xml"/>
         <!-- 自动扫描mappers.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/earlybird/entity/xml/**/*.xml"></property>  
        <!-- 加载数据源 -->
        <property name="dataSource" ref="dataSource"/>
        
        <property name="typeAliasesPackage" value="com.earlybird"/>
        
        <property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor"> <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value> <!-- helperDialect=mysql reasonable=true supportMethodsArguments=true params=count=countSql 
								autoRuntimeDialect=true -->
						</value>
					</property>
				</bean>
			</array>
		</property>
    </bean>

    <!-- 通过MapperScannerConfigurer进行mapper扫描（建议使用） mapper 批量扫描，从 mapper 包中扫描出 mapper 接口，自动创建代理对象，并在 spring 容器中注册名陈为类名首字母小写。 遵循的规范：将 mapper.java 和 mapper.xml 映射文件名陈一致，且在同一个目录
     -->
    <!-- 指定扫描的包，如果存在多个包使用(逗号,)分割 -->
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.earlybird.dao,com.earlybird.Service" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>-->
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.earlybird"/>
        <property name="annotationClass" value="com.earlybird.dao.annotation.MyBatisDao"/>
    </bean>
    
</beans>